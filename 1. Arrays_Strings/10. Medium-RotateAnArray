//Brute Force Solution
//Get K
//initialize new array
//add nums[i] into new_nums[(i+k)%n]
// class Solution {
//     public void rotate(int[] nums, int k) {
//         int n = nums.length;
//         k = k % n; // To handle cases when k > n
//         int[] new_nums = new int[n];
//         for (int i = 0; i < n; i++){
//             new_nums[(i+k)%n] = nums[i];
//         }

//         for (int i = 0; i < n; i++){
//             nums[i] = new_nums[i];
//         }
//     }
// }

// Optimal Solution
class Solution {
    public void rotate(int[] nums, int k) {
        int n = nums.length;
        k = k % n; // To handle cases when k > n

        reverse(nums, 0, n-1);
        reverse(nums, 0, k-1);
        reverse(nums, k, n-1);
    }

    public void reverse(int[] nums, int start, int end){
        while(start < end){
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;
            end--;
        }
    }
}