// Optimized Approach
// Variable Sliding Window - Two Pointers
class Solution {
    public int minSubArrayLen(int target, int[] nums) {
       int sum = 0;
       int minWindow = Integer.MAX_VALUE;
       int high = 0;
       int low = 0;

       while (high < nums.length){
        sum = sum + nums[high];
        while (sum >= target){
            int currentWindow = high-low + 1;
            minWindow = Math.min(minWindow, currentWindow);
            sum = sum - nums[low];
            low++;
        }
        high++;
       }
       return minWindow == Integer.MAX_VALUE ? 0 : minWindow;
    }
}


// Bruteforce Approach
// Time: O(n*2)
// Space: O(1)

// class Solution {
//     public int minSubArrayLen(int target, int[] nums) {
//         int minSubArrayLength = Integer.MAX_VALUE;

//         for (int i = 0; i < nums.length; i++) {
//             int sum = nums[i];
//             if (sum >= target) return 1;

//             for (int j = i + 1; j < nums.length; j++) {
//                 sum += nums[j];
//                 if (sum >= target) {
//                     minSubArrayLength = Math.min(minSubArrayLength, j - i + 1);
//                     break;
//                 }
//             }
//         }

//         return (minSubArrayLength == Integer.MAX_VALUE) ? 0 : minSubArrayLength;
//     }
// }