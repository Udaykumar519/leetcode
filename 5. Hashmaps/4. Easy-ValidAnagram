class Solution {
    public boolean isAnagram(String s, String t) {
        int i = 0;
        HashMap<Character, Integer> sHash = new HashMap<>();
        HashMap<Character, Integer> tHash = new HashMap<>();

        if (s.length() != t.length()) return false;

        while (i < s.length()){
            Character sChar = s.charAt(i);
            Character tChar = t.charAt(i);

            sHash.put(sChar, sHash.getOrDefault(sChar,0) + 1);
            tHash.put(tChar, tHash.getOrDefault(tChar,0) + 1);

            i++;
        }

        for (Character c : sHash.keySet()){
            if (!sHash.get(c).equals(tHash.get(c))) return false;
        }

        return true;
    }
}

// Using Array of length 26 [works only for alphabets, if we have any other characters use Hashmap]
// But if we have only alphabets, array performs better because we just increment and decrement because HashMap includes creating objects and Hashing

// Only alphabets: go with array (performamce), but we dont know how much size it would be if we have characters other than alphabets
// Generality: go with HashMap

// class Solution {
//     public boolean isAnagram(String s, String t) {
//         int m=s.length();
//         int n=t.length();
//         if(m!=n){
//             return false;
//         }
//         else{
//             int [] arr=new int[26];

//             for(int i=0;i<s.length();i++){
//                 arr[s.charAt(i)-'a']++;
//             }

//             for(int i=0;i<t.length();i++){
//                 arr[t.charAt(i)-'a']--;
//             }

//             for(int i=0;i<arr.length;i++){
//                 if(arr[i]!=0){
//                     return false;
//                 }
//             }
//         }
//     return true;
// }