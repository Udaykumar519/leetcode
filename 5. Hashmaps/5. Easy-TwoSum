class Solution {
    public int[] twoSum(int[] nums, int target) {

        //BruteForce (Slower)
        // TimeComplexity: O(n^2)
        // Space Complexity: O(n)

        // int[] result = new int[2];

        // for (int i=0; i < nums.length; i++){
        //     for (int j=i+1; j < nums.length; j++){
        //         if (nums[i] + nums[j] == target){
        //             result[0] = i;
        //             result[1] = j;
        //         }
        //     }
        // }

        // return result;



        // Two Pass Approach (Faster than BruteForce)
        // TimeComplexity: O(n)
        // SpaceComplexity: O(n)

        // HashMap<Integer, Integer> valIndexHashMap = new HashMap<>();

        // int requiredElement;

        // for (int i=0; i< nums.length; i++){
        //     valIndexHashMap.put(nums[i], i);
        // }


        // for (int j=0; j < nums.length; j++){
        //     requiredElement = target - nums[j];

        //     if (valIndexHashMap.containsKey(requiredElement) && valIndexHashMap.get(requiredElement) != j ){
        //         return new int[] {j, valIndexHashMap.get(requiredElement)};
        //     }else{
        //         valIndexHashMap.put(nums[j], j);
        //     }
        // }

        // return null;



        // One Pass Approach (Faster Than Two Pass Approach): BEST APPROACH
        // TimeComplexity: O(n)
        // SpaceComplexity: O(n)

        HashMap<Integer, Integer> valIndexHashMap = new HashMap<>();

        int requiredElement;

        for (int i=0; i< nums.length; i++){
            requiredElement = target - nums[i];

            if (valIndexHashMap.containsKey(requiredElement)){
                return new int[] {i, valIndexHashMap.get(requiredElement)};
            }else{
                valIndexHashMap.put(nums[i], i);
            }
        }

        return null;
    }
}